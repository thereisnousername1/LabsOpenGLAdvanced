#version 460

layout( isolines ) in;

uniform mat4 MVP;

void main()
{
	float u = gl_TessCoord.x;

	vec3 p0 = gl_in[0].gl_Position.xyz;
	vec3 p1 = gl_in[1].gl_Position.xyz;
	vec3 p2 = gl_in[2].gl_Position.xyz;
	vec3 p3 = gl_in[3].gl_Position.xyz;

	float u1 = (1.0 - u);
	float u2 = u * u;

	// Bernstein polynomials
	float b3 = u2 * u;
	float b2 = 3.0 * u2 * u1;
	float b1 = 3.0 * u * u1 * u1;
	float b0 = u1 * u1 * u1;

	// Cubic Bezier interpolation
	vec3 p = p0 * b0 + p1 * b1 + p2 * b2 + p3 * b3;

	gl_Position = MVP * vec4(p, 1.0);
}

/*
Tessellation Evaluation Shader (TES)

// Isolines Layout Input

This indicates the type of subdivision that is performed by the tessellation primitive generator. 
Other possibilities here include quads and triangles.

// GL Tessellation Coordinates

Within the main function of the TES, the ．gl_TessCoord・ variable contains the tessellation's ．u・ & ．v・ coordinates for this invocation. 
As we are only tessellating in one dimension, we only need the ．u・ coordinate, which corresponds to the ．x・ coordinate of ．gl_TessCoord・.

// Patch Primitive Points

The next step accesses the positions of the four control points (all the points in our patch primitive). 
These are available in the ．gl_in・ array.

// Bernstein Polynomials, Interpolation & Position Output

The cubic Bernstein polynomials are then evaluated at ．u・ and stored in ．b0,・ ．b1,・ ．b2,・ & ．b3・.
Next, we compute the interpolated position using the Bezier curve equation. 
The final position is converted to clip coordinates and assigned to the ．gl_Position・ output variable.
*/